name: Deploy Pokedex to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: testing
  CONTAINER_REGISTRY: mauurujnjzsdasdf.azurecr.io
  CONTAINER_APP_NAME: pokedex-app
  MONGODB_IMAGE: mongo:latest
  POKEDEX_IMAGE: pokedex-docker
  MONGO_DB: nest-pokemon
  PORT: 3000
  DEFAULT_LIMIT: 10

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_4DA2ACF59BB44A9F8728F61FBC463501 }}
        tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_83782B42F82648CD80CE64432505883B }}
        subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_9285D518C7DF49AA9CC9AEC09E1815C1 }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push Pokedex image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.POKEDEX_IMAGE }}:${{ github.sha }}
        
    - name: Create or update Container App Environment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Create Container App Environment if it doesn't exist
          az containerapp env show --name pokedex-environment --resource-group ${{ env.AZURE_RESOURCE_GROUP }} || \
          az containerapp env create --name pokedex-environment --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --location eastus
          
    - name: Deploy Container App with Pokedex and MongoDB
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Create or update the Container App with both MongoDB and Pokedex containers
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment pokedex-environment \
            --image ${{ env.CONTAINER_REGISTRY }}/${{ env.POKEDEX_IMAGE }}:${{ github.sha }} \
            --target-port ${{ env.PORT }} \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 3 \
            --registry-server ${{ env.CONTAINER_REGISTRY }} \
            --registry-username ${{ secrets.REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
            --env-vars \
              MONGO_DB="${{ env.MONGO_DB }}" \
              PORT="${{ env.PORT }}" \
              DEFAULT_LIMIT="${{ env.DEFAULT_LIMIT }}" \
            --containers '[
              {
                "name": "pokedexdb",
                "image": "${{ env.MONGODB_IMAGE }}",
                "resources": {
                  "cpu": 1,
                  "memory": "2Gi"
                },
                "volumeMounts": [
                  {
                    "volumeName": "mongodb-data",
                    "mountPath": "/data/db"
                  }
                ]
              }
            ]' \
            --volumes '[{"name":"mongodb-data","storageType":"AzureFile","storageName":"pokedexdbstorage"}]'
          
    - name: Verify deployment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Deployed Pokedex Container App to: $(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)"
